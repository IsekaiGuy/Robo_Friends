{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Header.js","constants.js","containers/App.js","actions.js","serviceWorkerRegistration.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","MemoCard","React","memo","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Header","console","log","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","OurFallbackComponent","error","resetErrorBoundary","message","onClick","connect","state","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","props","useEffect","filteredRobots","filter","robot","toLowerCase","includes","FallbackComponent","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","headers","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","action","initialStateRobots","logger","createLogger","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.97e8e23f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=400x400`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport const MemoCard = React.memo(Card);\n","import React from 'react';\nimport {MemoCard} from './Card';\n\nconst CardList = ({ robots }) => {\n\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <MemoCard\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ma3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from \"react\";\r\n\r\n// function areEqual(prevProps, nextProps) {\r\n//    return prevProps === nextProps ? false : true;\r\n//   }\r\n\r\nconst Header = () => {\r\n        console.log(\"Header\");\r\nreturn (<header>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        </header>);\r\n    };\r\n\r\n// export default class Header extends Component {\r\n//     shouldComponentUpdate(nextProps, nextState) {\r\n//         return false;\r\n//     }\r\n\r\n//     render() {\r\n//         return (<header>\r\n//                     <h1 className='f1'>RoboFriends</h1>\r\n//                 </header>);\r\n//     }\r\n// }\r\n\r\n  export default React.memo(Header);","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import React, { useEffect } from 'react';\nimport {connect} from \"react-redux\";\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Header from \"../components/Header\";\nimport {ErrorBoundary} from 'react-error-boundary'\nimport './App.css';\n\nimport { setSearchField, requestRobots} from \"../actions\";\n\nconst OurFallbackComponent = ({ error, resetErrorBoundary }) => {\n  return (\n    <div>\n      <h1>An error occurred: {error.message}</h1>\n      <button onClick={resetErrorBoundary}>Try again</button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nconst App = (props) => {\n\n  useEffect(() =>  {\n    props.onRequestRobots()\n  }, [])\n  \n    const filteredRobots = props.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(props.searchField.toLowerCase());\n    })\n    \n    return props.isPending ?\n      <h1>Loading</h1> :\n      <div className='tc'>\n          <Header />\n          <SearchBox searchChange={props.onSearchChange} />\n          <ErrorBoundary FallbackComponent={OurFallbackComponent}>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </div>;\n  }\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants.js\";\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants.js\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: \"\"\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCHFIELD: \r\n        return {...state, searchField: action.payload};\r\n\r\n        default: \r\n        return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING: \r\n        return {...state, isPending: true};\r\n\r\n        case REQUEST_ROBOTS_SUCCESS: \r\n        return {...state, robots: action.payload, isPending: false};\r\n\r\n        case REQUEST_ROBOTS_FAILED: \r\n        return {...state, error: action.payload, isPending: false};\r\n\r\n        default: \r\n        return state;\r\n    }\r\n}","import \"./wdyr\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from \"redux-thunk\";\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport 'tachyons';\nimport {searchRobots, requestRobots} from \"./reducers\";\n\nwindow.addEventListener('DOMContentLoaded',() => {\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>, \ndocument.getElementById('root'));\nserviceWorkerRegistration.register();\n})"],"sourceRoot":""}